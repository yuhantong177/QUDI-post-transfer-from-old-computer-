# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pulse_streamer.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pulse_streamer.proto',
  package='pulse_streamer',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x14pulse_streamer.proto\x12\x0epulse_streamer\"\r\n\x0bVoidMessage\".\n\x0fRegisterMessage\x12\r\n\x05value\x18\x01 \x01(\r\x12\x0c\n\x04mask\x18\x02 \x01(\r\"E\n\x0cPulseMessage\x12\r\n\x05ticks\x18\x01 \x01(\r\x12\x0c\n\x04\x64igi\x18\x02 \x01(\r\x12\x0b\n\x03\x61o0\x18\x03 \x01(\x05\x12\x0b\n\x03\x61o1\x18\x04 \x01(\x05\"{\n\x0fSequenceMessage\x12+\n\x05pulse\x18\x01 \x03(\x0b\x32\x1c.pulse_streamer.PulseMessage\x12\x0e\n\x06n_runs\x18\x02 \x01(\x03\x12+\n\x05\x66inal\x18\x03 \x01(\x0b\x32\x1c.pulse_streamer.PulseMessage\"\x8a\x02\n\x0eTriggerMessage\x12\x33\n\x05start\x18\x01 \x01(\x0e\x32$.pulse_streamer.TriggerMessage.Start\x12\x31\n\x04mode\x18\x02 \x01(\x0e\x32#.pulse_streamer.TriggerMessage.Mode\"p\n\x05Start\x12\r\n\tIMMEDIATE\x10\x00\x12\x0c\n\x08SOFTWARE\x10\x01\x12\x13\n\x0fHARDWARE_RISING\x10\x02\x12\x14\n\x10HARDWARE_FALLING\x10\x03\x12\x1f\n\x1bHARDWARE_RISING_AND_FALLING\x10\x04\"\x1e\n\x04Mode\x12\n\n\x06NORMAL\x10\x00\x12\n\n\x06SINGLE\x10\x01\"\x84\x01\n\x0c\x43lockMessage\x12;\n\x0c\x63lock_source\x18\x01 \x01(\x0e\x32%.pulse_streamer.ClockMessage.Clocking\"7\n\x08\x43locking\x12\x0c\n\x08INTERNAL\x10\x00\x12\x0e\n\nEXT_125MHZ\x10\x01\x12\r\n\tEXT_10MHZ\x10\x02\"!\n\x10\x44rpClkSetMessage\x12\r\n\x05value\x18\x01 \x01(\r\"f\n\x10GetSerialMessage\x12\x37\n\x06serial\x18\x01 \x01(\x0e\x32\'.pulse_streamer.GetSerialMessage.Serial\"\x19\n\x06Serial\x12\x06\n\x02ID\x10\x00\x12\x07\n\x03MAC\x10\x01\"#\n\x12PulseStreamerReply\x12\r\n\x05value\x18\x01 \x01(\r\"&\n\x15PulseStreamerIntReply\x12\r\n\x05value\x18\x01 \x01(\x05\"0\n\x18PulseStreamerStringReply\x12\x14\n\x0cstring_value\x18\x01 \x01(\t\"A\n\x11SetNetworkMessage\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x0f\n\x07netmask\x18\x02 \x01(\t\x12\x0f\n\x07gateway\x18\x03 \x01(\t\"*\n\x15\x45nableStaticIPMessage\x12\x11\n\tpermanent\x18\x01 \x01(\x08\"#\n\x0fHostnameMessage\x12\x10\n\x08hostname\x18\x01 \x01(\t\"g\n\x15\x41nalogCalibrationData\x12\x14\n\x0c\x64\x63_offset_a0\x18\x01 \x01(\x01\x12\x14\n\x0c\x64\x63_offset_a1\x18\x02 \x01(\x01\x12\x10\n\x08slope_a0\x18\x03 \x01(\x01\x12\x10\n\x08slope_a1\x18\x04 \x01(\x01\x32\x83\x15\n\rPulseStreamer\x12J\n\x05reset\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12N\n\x08\x63onstant\x12\x1c.pulse_streamer.PulseMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12O\n\nforceFinal\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12O\n\x06stream\x12\x1f.pulse_streamer.SequenceMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12M\n\x08startNow\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12R\n\nsetTrigger\x12\x1e.pulse_streamer.TriggerMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12T\n\x0fgetTriggerStart\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12T\n\x0fgetTriggerRearm\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12J\n\x05rearm\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12Q\n\x0bselectClock\x12\x1c.pulse_streamer.ClockMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12M\n\x08getClock\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12U\n\x0bsetClkParam\x12 .pulse_streamer.DrpClkSetMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12P\n\x0bisStreaming\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12P\n\x0bhasSequence\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12P\n\x0bhasFinished\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12]\n\x12getFirmwareVersion\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12T\n\tgetSerial\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12T\n\tgetFPGAID\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12T\n\tflash_lic\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12_\n\x0esetNetworkConf\x12!.pulse_streamer.SetNetworkMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12Y\n\x0egetNetworkConf\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12T\n\x0ftestNetworkConf\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12\x63\n\x0e\x65nableStaticIP\x12%.pulse_streamer.EnableStaticIPMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12W\n\x0bsetHostname\x12\x1f.pulse_streamer.HostnameMessage\x1a%.pulse_streamer.PulseStreamerIntReply\"\x00\x12V\n\x0bgetHostname\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12Y\n\x0egetTemperature\x12\x1b.pulse_streamer.VoidMessage\x1a(.pulse_streamer.PulseStreamerStringReply\"\x00\x12Q\n\x0cgetUnderflow\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12U\n\x10getDebugRegister\x12\x1b.pulse_streamer.VoidMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12Y\n\x10setDebugRegister\x12\x1f.pulse_streamer.RegisterMessage\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12\x63\n\x14setAnalogCalibration\x12%.pulse_streamer.AnalogCalibrationData\x1a\".pulse_streamer.PulseStreamerReply\"\x00\x12\\\n\x14getAnalogCalibration\x12\x1b.pulse_streamer.VoidMessage\x1a%.pulse_streamer.AnalogCalibrationData\"\x00\x62\x06proto3')
)



_TRIGGERMESSAGE_START = _descriptor.EnumDescriptor(
  name='Start',
  full_name='pulse_streamer.TriggerMessage.Start',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IMMEDIATE', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SOFTWARE', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HARDWARE_RISING', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HARDWARE_FALLING', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HARDWARE_RISING_AND_FALLING', index=4, number=4,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=422,
  serialized_end=534,
)
_sym_db.RegisterEnumDescriptor(_TRIGGERMESSAGE_START)

_TRIGGERMESSAGE_MODE = _descriptor.EnumDescriptor(
  name='Mode',
  full_name='pulse_streamer.TriggerMessage.Mode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NORMAL', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SINGLE', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=536,
  serialized_end=566,
)
_sym_db.RegisterEnumDescriptor(_TRIGGERMESSAGE_MODE)

_CLOCKMESSAGE_CLOCKING = _descriptor.EnumDescriptor(
  name='Clocking',
  full_name='pulse_streamer.ClockMessage.Clocking',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INTERNAL', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EXT_125MHZ', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EXT_10MHZ', index=2, number=2,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=646,
  serialized_end=701,
)
_sym_db.RegisterEnumDescriptor(_CLOCKMESSAGE_CLOCKING)

_GETSERIALMESSAGE_SERIAL = _descriptor.EnumDescriptor(
  name='Serial',
  full_name='pulse_streamer.GetSerialMessage.Serial',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ID', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MAC', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=815,
  serialized_end=840,
)
_sym_db.RegisterEnumDescriptor(_GETSERIALMESSAGE_SERIAL)


_VOIDMESSAGE = _descriptor.Descriptor(
  name='VoidMessage',
  full_name='pulse_streamer.VoidMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=53,
)


_REGISTERMESSAGE = _descriptor.Descriptor(
  name='RegisterMessage',
  full_name='pulse_streamer.RegisterMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='pulse_streamer.RegisterMessage.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='mask', full_name='pulse_streamer.RegisterMessage.mask', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=55,
  serialized_end=101,
)


_PULSEMESSAGE = _descriptor.Descriptor(
  name='PulseMessage',
  full_name='pulse_streamer.PulseMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ticks', full_name='pulse_streamer.PulseMessage.ticks', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='digi', full_name='pulse_streamer.PulseMessage.digi', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ao0', full_name='pulse_streamer.PulseMessage.ao0', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ao1', full_name='pulse_streamer.PulseMessage.ao1', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=103,
  serialized_end=172,
)


_SEQUENCEMESSAGE = _descriptor.Descriptor(
  name='SequenceMessage',
  full_name='pulse_streamer.SequenceMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pulse', full_name='pulse_streamer.SequenceMessage.pulse', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='n_runs', full_name='pulse_streamer.SequenceMessage.n_runs', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='final', full_name='pulse_streamer.SequenceMessage.final', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=174,
  serialized_end=297,
)


_TRIGGERMESSAGE = _descriptor.Descriptor(
  name='TriggerMessage',
  full_name='pulse_streamer.TriggerMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start', full_name='pulse_streamer.TriggerMessage.start', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='mode', full_name='pulse_streamer.TriggerMessage.mode', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _TRIGGERMESSAGE_START,
    _TRIGGERMESSAGE_MODE,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=300,
  serialized_end=566,
)


_CLOCKMESSAGE = _descriptor.Descriptor(
  name='ClockMessage',
  full_name='pulse_streamer.ClockMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='clock_source', full_name='pulse_streamer.ClockMessage.clock_source', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CLOCKMESSAGE_CLOCKING,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=569,
  serialized_end=701,
)


_DRPCLKSETMESSAGE = _descriptor.Descriptor(
  name='DrpClkSetMessage',
  full_name='pulse_streamer.DrpClkSetMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='pulse_streamer.DrpClkSetMessage.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=703,
  serialized_end=736,
)


_GETSERIALMESSAGE = _descriptor.Descriptor(
  name='GetSerialMessage',
  full_name='pulse_streamer.GetSerialMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='serial', full_name='pulse_streamer.GetSerialMessage.serial', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _GETSERIALMESSAGE_SERIAL,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=738,
  serialized_end=840,
)


_PULSESTREAMERREPLY = _descriptor.Descriptor(
  name='PulseStreamerReply',
  full_name='pulse_streamer.PulseStreamerReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='pulse_streamer.PulseStreamerReply.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=842,
  serialized_end=877,
)


_PULSESTREAMERINTREPLY = _descriptor.Descriptor(
  name='PulseStreamerIntReply',
  full_name='pulse_streamer.PulseStreamerIntReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='pulse_streamer.PulseStreamerIntReply.value', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=879,
  serialized_end=917,
)


_PULSESTREAMERSTRINGREPLY = _descriptor.Descriptor(
  name='PulseStreamerStringReply',
  full_name='pulse_streamer.PulseStreamerStringReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='string_value', full_name='pulse_streamer.PulseStreamerStringReply.string_value', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=919,
  serialized_end=967,
)


_SETNETWORKMESSAGE = _descriptor.Descriptor(
  name='SetNetworkMessage',
  full_name='pulse_streamer.SetNetworkMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='pulse_streamer.SetNetworkMessage.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='netmask', full_name='pulse_streamer.SetNetworkMessage.netmask', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='gateway', full_name='pulse_streamer.SetNetworkMessage.gateway', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=969,
  serialized_end=1034,
)


_ENABLESTATICIPMESSAGE = _descriptor.Descriptor(
  name='EnableStaticIPMessage',
  full_name='pulse_streamer.EnableStaticIPMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='permanent', full_name='pulse_streamer.EnableStaticIPMessage.permanent', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1036,
  serialized_end=1078,
)


_HOSTNAMEMESSAGE = _descriptor.Descriptor(
  name='HostnameMessage',
  full_name='pulse_streamer.HostnameMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hostname', full_name='pulse_streamer.HostnameMessage.hostname', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1080,
  serialized_end=1115,
)


_ANALOGCALIBRATIONDATA = _descriptor.Descriptor(
  name='AnalogCalibrationData',
  full_name='pulse_streamer.AnalogCalibrationData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dc_offset_a0', full_name='pulse_streamer.AnalogCalibrationData.dc_offset_a0', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dc_offset_a1', full_name='pulse_streamer.AnalogCalibrationData.dc_offset_a1', index=1,
      number=2, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='slope_a0', full_name='pulse_streamer.AnalogCalibrationData.slope_a0', index=2,
      number=3, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='slope_a1', full_name='pulse_streamer.AnalogCalibrationData.slope_a1', index=3,
      number=4, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1117,
  serialized_end=1220,
)

_SEQUENCEMESSAGE.fields_by_name['pulse'].message_type = _PULSEMESSAGE
_SEQUENCEMESSAGE.fields_by_name['final'].message_type = _PULSEMESSAGE
_TRIGGERMESSAGE.fields_by_name['start'].enum_type = _TRIGGERMESSAGE_START
_TRIGGERMESSAGE.fields_by_name['mode'].enum_type = _TRIGGERMESSAGE_MODE
_TRIGGERMESSAGE_START.containing_type = _TRIGGERMESSAGE
_TRIGGERMESSAGE_MODE.containing_type = _TRIGGERMESSAGE
_CLOCKMESSAGE.fields_by_name['clock_source'].enum_type = _CLOCKMESSAGE_CLOCKING
_CLOCKMESSAGE_CLOCKING.containing_type = _CLOCKMESSAGE
_GETSERIALMESSAGE.fields_by_name['serial'].enum_type = _GETSERIALMESSAGE_SERIAL
_GETSERIALMESSAGE_SERIAL.containing_type = _GETSERIALMESSAGE
DESCRIPTOR.message_types_by_name['VoidMessage'] = _VOIDMESSAGE
DESCRIPTOR.message_types_by_name['RegisterMessage'] = _REGISTERMESSAGE
DESCRIPTOR.message_types_by_name['PulseMessage'] = _PULSEMESSAGE
DESCRIPTOR.message_types_by_name['SequenceMessage'] = _SEQUENCEMESSAGE
DESCRIPTOR.message_types_by_name['TriggerMessage'] = _TRIGGERMESSAGE
DESCRIPTOR.message_types_by_name['ClockMessage'] = _CLOCKMESSAGE
DESCRIPTOR.message_types_by_name['DrpClkSetMessage'] = _DRPCLKSETMESSAGE
DESCRIPTOR.message_types_by_name['GetSerialMessage'] = _GETSERIALMESSAGE
DESCRIPTOR.message_types_by_name['PulseStreamerReply'] = _PULSESTREAMERREPLY
DESCRIPTOR.message_types_by_name['PulseStreamerIntReply'] = _PULSESTREAMERINTREPLY
DESCRIPTOR.message_types_by_name['PulseStreamerStringReply'] = _PULSESTREAMERSTRINGREPLY
DESCRIPTOR.message_types_by_name['SetNetworkMessage'] = _SETNETWORKMESSAGE
DESCRIPTOR.message_types_by_name['EnableStaticIPMessage'] = _ENABLESTATICIPMESSAGE
DESCRIPTOR.message_types_by_name['HostnameMessage'] = _HOSTNAMEMESSAGE
DESCRIPTOR.message_types_by_name['AnalogCalibrationData'] = _ANALOGCALIBRATIONDATA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

VoidMessage = _reflection.GeneratedProtocolMessageType('VoidMessage', (_message.Message,), dict(
  DESCRIPTOR = _VOIDMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.VoidMessage)
  ))
_sym_db.RegisterMessage(VoidMessage)

RegisterMessage = _reflection.GeneratedProtocolMessageType('RegisterMessage', (_message.Message,), dict(
  DESCRIPTOR = _REGISTERMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.RegisterMessage)
  ))
_sym_db.RegisterMessage(RegisterMessage)

PulseMessage = _reflection.GeneratedProtocolMessageType('PulseMessage', (_message.Message,), dict(
  DESCRIPTOR = _PULSEMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.PulseMessage)
  ))
_sym_db.RegisterMessage(PulseMessage)

SequenceMessage = _reflection.GeneratedProtocolMessageType('SequenceMessage', (_message.Message,), dict(
  DESCRIPTOR = _SEQUENCEMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.SequenceMessage)
  ))
_sym_db.RegisterMessage(SequenceMessage)

TriggerMessage = _reflection.GeneratedProtocolMessageType('TriggerMessage', (_message.Message,), dict(
  DESCRIPTOR = _TRIGGERMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.TriggerMessage)
  ))
_sym_db.RegisterMessage(TriggerMessage)

ClockMessage = _reflection.GeneratedProtocolMessageType('ClockMessage', (_message.Message,), dict(
  DESCRIPTOR = _CLOCKMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.ClockMessage)
  ))
_sym_db.RegisterMessage(ClockMessage)

DrpClkSetMessage = _reflection.GeneratedProtocolMessageType('DrpClkSetMessage', (_message.Message,), dict(
  DESCRIPTOR = _DRPCLKSETMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.DrpClkSetMessage)
  ))
_sym_db.RegisterMessage(DrpClkSetMessage)

GetSerialMessage = _reflection.GeneratedProtocolMessageType('GetSerialMessage', (_message.Message,), dict(
  DESCRIPTOR = _GETSERIALMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.GetSerialMessage)
  ))
_sym_db.RegisterMessage(GetSerialMessage)

PulseStreamerReply = _reflection.GeneratedProtocolMessageType('PulseStreamerReply', (_message.Message,), dict(
  DESCRIPTOR = _PULSESTREAMERREPLY,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.PulseStreamerReply)
  ))
_sym_db.RegisterMessage(PulseStreamerReply)

PulseStreamerIntReply = _reflection.GeneratedProtocolMessageType('PulseStreamerIntReply', (_message.Message,), dict(
  DESCRIPTOR = _PULSESTREAMERINTREPLY,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.PulseStreamerIntReply)
  ))
_sym_db.RegisterMessage(PulseStreamerIntReply)

PulseStreamerStringReply = _reflection.GeneratedProtocolMessageType('PulseStreamerStringReply', (_message.Message,), dict(
  DESCRIPTOR = _PULSESTREAMERSTRINGREPLY,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.PulseStreamerStringReply)
  ))
_sym_db.RegisterMessage(PulseStreamerStringReply)

SetNetworkMessage = _reflection.GeneratedProtocolMessageType('SetNetworkMessage', (_message.Message,), dict(
  DESCRIPTOR = _SETNETWORKMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.SetNetworkMessage)
  ))
_sym_db.RegisterMessage(SetNetworkMessage)

EnableStaticIPMessage = _reflection.GeneratedProtocolMessageType('EnableStaticIPMessage', (_message.Message,), dict(
  DESCRIPTOR = _ENABLESTATICIPMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.EnableStaticIPMessage)
  ))
_sym_db.RegisterMessage(EnableStaticIPMessage)

HostnameMessage = _reflection.GeneratedProtocolMessageType('HostnameMessage', (_message.Message,), dict(
  DESCRIPTOR = _HOSTNAMEMESSAGE,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.HostnameMessage)
  ))
_sym_db.RegisterMessage(HostnameMessage)

AnalogCalibrationData = _reflection.GeneratedProtocolMessageType('AnalogCalibrationData', (_message.Message,), dict(
  DESCRIPTOR = _ANALOGCALIBRATIONDATA,
  __module__ = 'pulse_streamer_pb2'
  # @@protoc_insertion_point(class_scope:pulse_streamer.AnalogCalibrationData)
  ))
_sym_db.RegisterMessage(AnalogCalibrationData)



_PULSESTREAMER = _descriptor.ServiceDescriptor(
  name='PulseStreamer',
  full_name='pulse_streamer.PulseStreamer',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=1223,
  serialized_end=3914,
  methods=[
  _descriptor.MethodDescriptor(
    name='reset',
    full_name='pulse_streamer.PulseStreamer.reset',
    index=0,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='constant',
    full_name='pulse_streamer.PulseStreamer.constant',
    index=1,
    containing_service=None,
    input_type=_PULSEMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='forceFinal',
    full_name='pulse_streamer.PulseStreamer.forceFinal',
    index=2,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='stream',
    full_name='pulse_streamer.PulseStreamer.stream',
    index=3,
    containing_service=None,
    input_type=_SEQUENCEMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='startNow',
    full_name='pulse_streamer.PulseStreamer.startNow',
    index=4,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setTrigger',
    full_name='pulse_streamer.PulseStreamer.setTrigger',
    index=5,
    containing_service=None,
    input_type=_TRIGGERMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getTriggerStart',
    full_name='pulse_streamer.PulseStreamer.getTriggerStart',
    index=6,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getTriggerRearm',
    full_name='pulse_streamer.PulseStreamer.getTriggerRearm',
    index=7,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='rearm',
    full_name='pulse_streamer.PulseStreamer.rearm',
    index=8,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='selectClock',
    full_name='pulse_streamer.PulseStreamer.selectClock',
    index=9,
    containing_service=None,
    input_type=_CLOCKMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getClock',
    full_name='pulse_streamer.PulseStreamer.getClock',
    index=10,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setClkParam',
    full_name='pulse_streamer.PulseStreamer.setClkParam',
    index=11,
    containing_service=None,
    input_type=_DRPCLKSETMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='isStreaming',
    full_name='pulse_streamer.PulseStreamer.isStreaming',
    index=12,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='hasSequence',
    full_name='pulse_streamer.PulseStreamer.hasSequence',
    index=13,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='hasFinished',
    full_name='pulse_streamer.PulseStreamer.hasFinished',
    index=14,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getFirmwareVersion',
    full_name='pulse_streamer.PulseStreamer.getFirmwareVersion',
    index=15,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getSerial',
    full_name='pulse_streamer.PulseStreamer.getSerial',
    index=16,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getFPGAID',
    full_name='pulse_streamer.PulseStreamer.getFPGAID',
    index=17,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='flash_lic',
    full_name='pulse_streamer.PulseStreamer.flash_lic',
    index=18,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setNetworkConf',
    full_name='pulse_streamer.PulseStreamer.setNetworkConf',
    index=19,
    containing_service=None,
    input_type=_SETNETWORKMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getNetworkConf',
    full_name='pulse_streamer.PulseStreamer.getNetworkConf',
    index=20,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='testNetworkConf',
    full_name='pulse_streamer.PulseStreamer.testNetworkConf',
    index=21,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='enableStaticIP',
    full_name='pulse_streamer.PulseStreamer.enableStaticIP',
    index=22,
    containing_service=None,
    input_type=_ENABLESTATICIPMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setHostname',
    full_name='pulse_streamer.PulseStreamer.setHostname',
    index=23,
    containing_service=None,
    input_type=_HOSTNAMEMESSAGE,
    output_type=_PULSESTREAMERINTREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getHostname',
    full_name='pulse_streamer.PulseStreamer.getHostname',
    index=24,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getTemperature',
    full_name='pulse_streamer.PulseStreamer.getTemperature',
    index=25,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERSTRINGREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getUnderflow',
    full_name='pulse_streamer.PulseStreamer.getUnderflow',
    index=26,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getDebugRegister',
    full_name='pulse_streamer.PulseStreamer.getDebugRegister',
    index=27,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setDebugRegister',
    full_name='pulse_streamer.PulseStreamer.setDebugRegister',
    index=28,
    containing_service=None,
    input_type=_REGISTERMESSAGE,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setAnalogCalibration',
    full_name='pulse_streamer.PulseStreamer.setAnalogCalibration',
    index=29,
    containing_service=None,
    input_type=_ANALOGCALIBRATIONDATA,
    output_type=_PULSESTREAMERREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAnalogCalibration',
    full_name='pulse_streamer.PulseStreamer.getAnalogCalibration',
    index=30,
    containing_service=None,
    input_type=_VOIDMESSAGE,
    output_type=_ANALOGCALIBRATIONDATA,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PULSESTREAMER)

DESCRIPTOR.services_by_name['PulseStreamer'] = _PULSESTREAMER

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PulseStreamerStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.reset = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/reset',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.constant = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/constant',
          request_serializer=PulseMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.forceFinal = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/forceFinal',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.stream = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/stream',
          request_serializer=SequenceMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.startNow = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/startNow',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.setTrigger = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setTrigger',
          request_serializer=TriggerMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getTriggerStart = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getTriggerStart',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getTriggerRearm = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getTriggerRearm',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.rearm = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/rearm',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.selectClock = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/selectClock',
          request_serializer=ClockMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getClock = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getClock',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.setClkParam = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setClkParam',
          request_serializer=DrpClkSetMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.isStreaming = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/isStreaming',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.hasSequence = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/hasSequence',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.hasFinished = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/hasFinished',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getFirmwareVersion = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getFirmwareVersion',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.getSerial = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getSerial',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.getFPGAID = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getFPGAID',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.flash_lic = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/flash_lic',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.setNetworkConf = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setNetworkConf',
          request_serializer=SetNetworkMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.getNetworkConf = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getNetworkConf',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.testNetworkConf = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/testNetworkConf',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.enableStaticIP = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/enableStaticIP',
          request_serializer=EnableStaticIPMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.setHostname = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setHostname',
          request_serializer=HostnameMessage.SerializeToString,
          response_deserializer=PulseStreamerIntReply.FromString,
          )
      self.getHostname = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getHostname',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.getTemperature = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getTemperature',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerStringReply.FromString,
          )
      self.getUnderflow = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getUnderflow',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getDebugRegister = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getDebugRegister',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.setDebugRegister = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setDebugRegister',
          request_serializer=RegisterMessage.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.setAnalogCalibration = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/setAnalogCalibration',
          request_serializer=AnalogCalibrationData.SerializeToString,
          response_deserializer=PulseStreamerReply.FromString,
          )
      self.getAnalogCalibration = channel.unary_unary(
          '/pulse_streamer.PulseStreamer/getAnalogCalibration',
          request_serializer=VoidMessage.SerializeToString,
          response_deserializer=AnalogCalibrationData.FromString,
          )


  class PulseStreamerServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def reset(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def constant(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def forceFinal(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def stream(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def startNow(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setTrigger(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getTriggerStart(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getTriggerRearm(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def rearm(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def selectClock(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getClock(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setClkParam(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isStreaming(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def hasSequence(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def hasFinished(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getFirmwareVersion(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getSerial(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getFPGAID(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def flash_lic(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def testNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def enableStaticIP(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setHostname(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getHostname(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getTemperature(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getUnderflow(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDebugRegister(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setDebugRegister(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setAnalogCalibration(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAnalogCalibration(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PulseStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'reset': grpc.unary_unary_rpc_method_handler(
            servicer.reset,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'constant': grpc.unary_unary_rpc_method_handler(
            servicer.constant,
            request_deserializer=PulseMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'forceFinal': grpc.unary_unary_rpc_method_handler(
            servicer.forceFinal,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'stream': grpc.unary_unary_rpc_method_handler(
            servicer.stream,
            request_deserializer=SequenceMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'startNow': grpc.unary_unary_rpc_method_handler(
            servicer.startNow,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'setTrigger': grpc.unary_unary_rpc_method_handler(
            servicer.setTrigger,
            request_deserializer=TriggerMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getTriggerStart': grpc.unary_unary_rpc_method_handler(
            servicer.getTriggerStart,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getTriggerRearm': grpc.unary_unary_rpc_method_handler(
            servicer.getTriggerRearm,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'rearm': grpc.unary_unary_rpc_method_handler(
            servicer.rearm,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'selectClock': grpc.unary_unary_rpc_method_handler(
            servicer.selectClock,
            request_deserializer=ClockMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getClock': grpc.unary_unary_rpc_method_handler(
            servicer.getClock,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'setClkParam': grpc.unary_unary_rpc_method_handler(
            servicer.setClkParam,
            request_deserializer=DrpClkSetMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'isStreaming': grpc.unary_unary_rpc_method_handler(
            servicer.isStreaming,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'hasSequence': grpc.unary_unary_rpc_method_handler(
            servicer.hasSequence,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'hasFinished': grpc.unary_unary_rpc_method_handler(
            servicer.hasFinished,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getFirmwareVersion': grpc.unary_unary_rpc_method_handler(
            servicer.getFirmwareVersion,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'getSerial': grpc.unary_unary_rpc_method_handler(
            servicer.getSerial,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'getFPGAID': grpc.unary_unary_rpc_method_handler(
            servicer.getFPGAID,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'flash_lic': grpc.unary_unary_rpc_method_handler(
            servicer.flash_lic,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'setNetworkConf': grpc.unary_unary_rpc_method_handler(
            servicer.setNetworkConf,
            request_deserializer=SetNetworkMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'getNetworkConf': grpc.unary_unary_rpc_method_handler(
            servicer.getNetworkConf,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'testNetworkConf': grpc.unary_unary_rpc_method_handler(
            servicer.testNetworkConf,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'enableStaticIP': grpc.unary_unary_rpc_method_handler(
            servicer.enableStaticIP,
            request_deserializer=EnableStaticIPMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'setHostname': grpc.unary_unary_rpc_method_handler(
            servicer.setHostname,
            request_deserializer=HostnameMessage.FromString,
            response_serializer=PulseStreamerIntReply.SerializeToString,
        ),
        'getHostname': grpc.unary_unary_rpc_method_handler(
            servicer.getHostname,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'getTemperature': grpc.unary_unary_rpc_method_handler(
            servicer.getTemperature,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerStringReply.SerializeToString,
        ),
        'getUnderflow': grpc.unary_unary_rpc_method_handler(
            servicer.getUnderflow,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getDebugRegister': grpc.unary_unary_rpc_method_handler(
            servicer.getDebugRegister,
            request_deserializer=VoidMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'setDebugRegister': grpc.unary_unary_rpc_method_handler(
            servicer.setDebugRegister,
            request_deserializer=RegisterMessage.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'setAnalogCalibration': grpc.unary_unary_rpc_method_handler(
            servicer.setAnalogCalibration,
            request_deserializer=AnalogCalibrationData.FromString,
            response_serializer=PulseStreamerReply.SerializeToString,
        ),
        'getAnalogCalibration': grpc.unary_unary_rpc_method_handler(
            servicer.getAnalogCalibration,
            request_deserializer=VoidMessage.FromString,
            response_serializer=AnalogCalibrationData.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'pulse_streamer.PulseStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPulseStreamerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def reset(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def constant(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def forceFinal(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def stream(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def startNow(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setTrigger(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getTriggerStart(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getTriggerRearm(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def rearm(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def selectClock(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getClock(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setClkParam(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isStreaming(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def hasSequence(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def hasFinished(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getFirmwareVersion(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getSerial(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getFPGAID(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def flash_lic(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def testNetworkConf(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def enableStaticIP(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setHostname(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getHostname(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getTemperature(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getUnderflow(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDebugRegister(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setDebugRegister(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setAnalogCalibration(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAnalogCalibration(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPulseStreamerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def reset(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    reset.future = None
    def constant(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    constant.future = None
    def forceFinal(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    forceFinal.future = None
    def stream(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    stream.future = None
    def startNow(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    startNow.future = None
    def setTrigger(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setTrigger.future = None
    def getTriggerStart(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getTriggerStart.future = None
    def getTriggerRearm(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getTriggerRearm.future = None
    def rearm(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    rearm.future = None
    def selectClock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    selectClock.future = None
    def getClock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getClock.future = None
    def setClkParam(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setClkParam.future = None
    def isStreaming(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    isStreaming.future = None
    def hasSequence(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    hasSequence.future = None
    def hasFinished(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    hasFinished.future = None
    def getFirmwareVersion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getFirmwareVersion.future = None
    def getSerial(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getSerial.future = None
    def getFPGAID(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getFPGAID.future = None
    def flash_lic(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    flash_lic.future = None
    def setNetworkConf(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setNetworkConf.future = None
    def getNetworkConf(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getNetworkConf.future = None
    def testNetworkConf(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    testNetworkConf.future = None
    def enableStaticIP(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    enableStaticIP.future = None
    def setHostname(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setHostname.future = None
    def getHostname(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getHostname.future = None
    def getTemperature(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getTemperature.future = None
    def getUnderflow(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getUnderflow.future = None
    def getDebugRegister(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getDebugRegister.future = None
    def setDebugRegister(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setDebugRegister.future = None
    def setAnalogCalibration(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    setAnalogCalibration.future = None
    def getAnalogCalibration(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getAnalogCalibration.future = None


  def beta_create_PulseStreamer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('pulse_streamer.PulseStreamer', 'constant'): PulseMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'enableStaticIP'): EnableStaticIPMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'flash_lic'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'forceFinal'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getAnalogCalibration'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getClock'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getDebugRegister'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getFPGAID'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getFirmwareVersion'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getHostname'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getNetworkConf'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getSerial'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getTemperature'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getTriggerRearm'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getTriggerStart'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'getUnderflow'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'hasFinished'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'hasSequence'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'isStreaming'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'rearm'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'reset'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'selectClock'): ClockMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'setAnalogCalibration'): AnalogCalibrationData.FromString,
      ('pulse_streamer.PulseStreamer', 'setClkParam'): DrpClkSetMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'setDebugRegister'): RegisterMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'setHostname'): HostnameMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'setNetworkConf'): SetNetworkMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'setTrigger'): TriggerMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'startNow'): VoidMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'stream'): SequenceMessage.FromString,
      ('pulse_streamer.PulseStreamer', 'testNetworkConf'): VoidMessage.FromString,
    }
    response_serializers = {
      ('pulse_streamer.PulseStreamer', 'constant'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'enableStaticIP'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'flash_lic'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'forceFinal'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getAnalogCalibration'): AnalogCalibrationData.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getClock'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getDebugRegister'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getFPGAID'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getFirmwareVersion'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getHostname'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getNetworkConf'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getSerial'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTemperature'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTriggerRearm'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTriggerStart'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getUnderflow'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'hasFinished'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'hasSequence'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'isStreaming'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'rearm'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'reset'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'selectClock'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setAnalogCalibration'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setClkParam'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setDebugRegister'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setHostname'): PulseStreamerIntReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setNetworkConf'): PulseStreamerStringReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setTrigger'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'startNow'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'stream'): PulseStreamerReply.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'testNetworkConf'): PulseStreamerReply.SerializeToString,
    }
    method_implementations = {
      ('pulse_streamer.PulseStreamer', 'constant'): face_utilities.unary_unary_inline(servicer.constant),
      ('pulse_streamer.PulseStreamer', 'enableStaticIP'): face_utilities.unary_unary_inline(servicer.enableStaticIP),
      ('pulse_streamer.PulseStreamer', 'flash_lic'): face_utilities.unary_unary_inline(servicer.flash_lic),
      ('pulse_streamer.PulseStreamer', 'forceFinal'): face_utilities.unary_unary_inline(servicer.forceFinal),
      ('pulse_streamer.PulseStreamer', 'getAnalogCalibration'): face_utilities.unary_unary_inline(servicer.getAnalogCalibration),
      ('pulse_streamer.PulseStreamer', 'getClock'): face_utilities.unary_unary_inline(servicer.getClock),
      ('pulse_streamer.PulseStreamer', 'getDebugRegister'): face_utilities.unary_unary_inline(servicer.getDebugRegister),
      ('pulse_streamer.PulseStreamer', 'getFPGAID'): face_utilities.unary_unary_inline(servicer.getFPGAID),
      ('pulse_streamer.PulseStreamer', 'getFirmwareVersion'): face_utilities.unary_unary_inline(servicer.getFirmwareVersion),
      ('pulse_streamer.PulseStreamer', 'getHostname'): face_utilities.unary_unary_inline(servicer.getHostname),
      ('pulse_streamer.PulseStreamer', 'getNetworkConf'): face_utilities.unary_unary_inline(servicer.getNetworkConf),
      ('pulse_streamer.PulseStreamer', 'getSerial'): face_utilities.unary_unary_inline(servicer.getSerial),
      ('pulse_streamer.PulseStreamer', 'getTemperature'): face_utilities.unary_unary_inline(servicer.getTemperature),
      ('pulse_streamer.PulseStreamer', 'getTriggerRearm'): face_utilities.unary_unary_inline(servicer.getTriggerRearm),
      ('pulse_streamer.PulseStreamer', 'getTriggerStart'): face_utilities.unary_unary_inline(servicer.getTriggerStart),
      ('pulse_streamer.PulseStreamer', 'getUnderflow'): face_utilities.unary_unary_inline(servicer.getUnderflow),
      ('pulse_streamer.PulseStreamer', 'hasFinished'): face_utilities.unary_unary_inline(servicer.hasFinished),
      ('pulse_streamer.PulseStreamer', 'hasSequence'): face_utilities.unary_unary_inline(servicer.hasSequence),
      ('pulse_streamer.PulseStreamer', 'isStreaming'): face_utilities.unary_unary_inline(servicer.isStreaming),
      ('pulse_streamer.PulseStreamer', 'rearm'): face_utilities.unary_unary_inline(servicer.rearm),
      ('pulse_streamer.PulseStreamer', 'reset'): face_utilities.unary_unary_inline(servicer.reset),
      ('pulse_streamer.PulseStreamer', 'selectClock'): face_utilities.unary_unary_inline(servicer.selectClock),
      ('pulse_streamer.PulseStreamer', 'setAnalogCalibration'): face_utilities.unary_unary_inline(servicer.setAnalogCalibration),
      ('pulse_streamer.PulseStreamer', 'setClkParam'): face_utilities.unary_unary_inline(servicer.setClkParam),
      ('pulse_streamer.PulseStreamer', 'setDebugRegister'): face_utilities.unary_unary_inline(servicer.setDebugRegister),
      ('pulse_streamer.PulseStreamer', 'setHostname'): face_utilities.unary_unary_inline(servicer.setHostname),
      ('pulse_streamer.PulseStreamer', 'setNetworkConf'): face_utilities.unary_unary_inline(servicer.setNetworkConf),
      ('pulse_streamer.PulseStreamer', 'setTrigger'): face_utilities.unary_unary_inline(servicer.setTrigger),
      ('pulse_streamer.PulseStreamer', 'startNow'): face_utilities.unary_unary_inline(servicer.startNow),
      ('pulse_streamer.PulseStreamer', 'stream'): face_utilities.unary_unary_inline(servicer.stream),
      ('pulse_streamer.PulseStreamer', 'testNetworkConf'): face_utilities.unary_unary_inline(servicer.testNetworkConf),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PulseStreamer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('pulse_streamer.PulseStreamer', 'constant'): PulseMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'enableStaticIP'): EnableStaticIPMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'flash_lic'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'forceFinal'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getAnalogCalibration'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getClock'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getDebugRegister'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getFPGAID'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getFirmwareVersion'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getHostname'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getNetworkConf'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getSerial'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTemperature'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTriggerRearm'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getTriggerStart'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'getUnderflow'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'hasFinished'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'hasSequence'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'isStreaming'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'rearm'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'reset'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'selectClock'): ClockMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setAnalogCalibration'): AnalogCalibrationData.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setClkParam'): DrpClkSetMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setDebugRegister'): RegisterMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setHostname'): HostnameMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setNetworkConf'): SetNetworkMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'setTrigger'): TriggerMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'startNow'): VoidMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'stream'): SequenceMessage.SerializeToString,
      ('pulse_streamer.PulseStreamer', 'testNetworkConf'): VoidMessage.SerializeToString,
    }
    response_deserializers = {
      ('pulse_streamer.PulseStreamer', 'constant'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'enableStaticIP'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'flash_lic'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'forceFinal'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getAnalogCalibration'): AnalogCalibrationData.FromString,
      ('pulse_streamer.PulseStreamer', 'getClock'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getDebugRegister'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getFPGAID'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getFirmwareVersion'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getHostname'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getNetworkConf'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getSerial'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getTemperature'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getTriggerRearm'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getTriggerStart'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'getUnderflow'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'hasFinished'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'hasSequence'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'isStreaming'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'rearm'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'reset'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'selectClock'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setAnalogCalibration'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setClkParam'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setDebugRegister'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setHostname'): PulseStreamerIntReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setNetworkConf'): PulseStreamerStringReply.FromString,
      ('pulse_streamer.PulseStreamer', 'setTrigger'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'startNow'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'stream'): PulseStreamerReply.FromString,
      ('pulse_streamer.PulseStreamer', 'testNetworkConf'): PulseStreamerReply.FromString,
    }
    cardinalities = {
      'constant': cardinality.Cardinality.UNARY_UNARY,
      'enableStaticIP': cardinality.Cardinality.UNARY_UNARY,
      'flash_lic': cardinality.Cardinality.UNARY_UNARY,
      'forceFinal': cardinality.Cardinality.UNARY_UNARY,
      'getAnalogCalibration': cardinality.Cardinality.UNARY_UNARY,
      'getClock': cardinality.Cardinality.UNARY_UNARY,
      'getDebugRegister': cardinality.Cardinality.UNARY_UNARY,
      'getFPGAID': cardinality.Cardinality.UNARY_UNARY,
      'getFirmwareVersion': cardinality.Cardinality.UNARY_UNARY,
      'getHostname': cardinality.Cardinality.UNARY_UNARY,
      'getNetworkConf': cardinality.Cardinality.UNARY_UNARY,
      'getSerial': cardinality.Cardinality.UNARY_UNARY,
      'getTemperature': cardinality.Cardinality.UNARY_UNARY,
      'getTriggerRearm': cardinality.Cardinality.UNARY_UNARY,
      'getTriggerStart': cardinality.Cardinality.UNARY_UNARY,
      'getUnderflow': cardinality.Cardinality.UNARY_UNARY,
      'hasFinished': cardinality.Cardinality.UNARY_UNARY,
      'hasSequence': cardinality.Cardinality.UNARY_UNARY,
      'isStreaming': cardinality.Cardinality.UNARY_UNARY,
      'rearm': cardinality.Cardinality.UNARY_UNARY,
      'reset': cardinality.Cardinality.UNARY_UNARY,
      'selectClock': cardinality.Cardinality.UNARY_UNARY,
      'setAnalogCalibration': cardinality.Cardinality.UNARY_UNARY,
      'setClkParam': cardinality.Cardinality.UNARY_UNARY,
      'setDebugRegister': cardinality.Cardinality.UNARY_UNARY,
      'setHostname': cardinality.Cardinality.UNARY_UNARY,
      'setNetworkConf': cardinality.Cardinality.UNARY_UNARY,
      'setTrigger': cardinality.Cardinality.UNARY_UNARY,
      'startNow': cardinality.Cardinality.UNARY_UNARY,
      'stream': cardinality.Cardinality.UNARY_UNARY,
      'testNetworkConf': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'pulse_streamer.PulseStreamer', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
